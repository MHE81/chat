import random
from math import gcd
import socket
import threading
import hashlib
import string
import _json
from cryptography.fernet import Fernet

class User:
    def __init__(self, email, username, password, salt, hashed, role):
        self.email = email
        self.username = username
        self.password = password
        self.salt = salt
        self.hashed = hashed
        self.role = role
        # defining permissions based on role
        if role == "super admin":
            permission = [1, 1, 1, 1]
        if role == "admin":
            permission = [1, 1, 1, 0]
        if role == "advanced user":
            permission = [1, 1, 0, 0]
        if role == "begginer user":
            permission = [1, 0, 0, 0]

    def assign_permissions(self, role):
        roles_permissions = {
            'super admin': [1, 1, 1, 1],
            'admin': [1, 1, 1, 0],
            'advanced user': [1, 1, 0, 0],
            'beginner user': [1, 0, 0, 0]
        }
        return roles_permissions.get(role, [0, 0, 0, 0])

    def __repr__(self):
        return (f"User(email={self.email}, username={self.username}, "
                f"password={self.password}, salt={self.salt}, hashed={self.hashed}, role={self.role}")


class ChatSystem:
    def __init__(self):
        self.users = []

    def handle_client(self, conn, addr):
        print(f"Connected by {addr}")
        while True:
            data = conn.recv(1024)
            if not data:
                break
            # username, public_key = data.decode().split(":")
            # print(f"Received public key for {username}: {public_key}")
            command = data.decode()
            if command == "sign up":
                new_user = conn.recv(1024)
            print(f"Received User info: {new_user}")
            self.users.append(new_user)
            public_key, private_key = generate_key_pair()
            # s.sendall(f"{private_key}:{public_key}".encode())

    def start_server(self):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('localhost', 12345))
            s.listen()
            print("Chat system listening on port 12345...")
            while True:
                conn, addr = s.accept()
                threading.Thread(target=self.handle_client, args=(conn, addr)).start()


def is_prime(n, k=5):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0:
        return False

    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2

    for _ in range(k):
        a = random.randint(2, n - 2)
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True


def generate_large_prime(key_size):
    # Generate a large prime number of key_size bits.
    while True:
        num = random.getrandbits(key_size)
        if is_prime(num):
            return num


def modinv(a, m):
    #Compute the modular inverse of a under modulo m using the Extended Euclidean Algorithm.
    m0, x0, x1 = m, 0, 1
    if m == 1:
        return 0
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    if x1 < 0:
        x1 += m0
    return x1


def generate_key_pair(key_size=2048):
    # Generate RSA public-private key pair.
    p = generate_large_prime(key_size // 2)
    q = generate_large_prime(key_size // 2)

    n = p * q
    phi = (p - 1) * (q - 1)

    e = 65537
    if gcd(e, phi) != 1:
        raise ValueError("e and phi are not coprime. Please choose different primes.")

    d = modinv(e, phi)

    public_key = (e, n)
    private_key = (d, n)

    return public_key, private_key


if __name__ == "__main__":
    chat_system = ChatSystem()
    chat_system.start_server()
    