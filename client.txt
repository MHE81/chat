import hashlib
import random
import string
from system import User, generate_key_pair, ChatSystem
import socket
import threading
import json


def generate_random_charset(length):
    # Define the character set (you can customize it as needed)
    characters = string.ascii_letters + string.digits + string.punctuation
    # Generate a random character set of the specified length
    random_charset = ''.join(random.choice(characters) for _ in range(length))
    return random_charset


class SignUpSystem:
    # def __init__(self):
    #     self.users = []

    def create_super_admin(self):
        print("Super Admin:\n")
        email = input("Enter your email: ")
        while any(email == user.email for user in self.users):
            email = input("This email has been used. Enter another one: ")
        username = input("Enter your username: ")
        while any(username == user.username for user in self.users):
            username = input("This username has been used. Enter another one: ")
        password = input("Enter your password: ")
        password_confirm = input("Confirm your password: ")
        salt = generate_random_charset(8)
        while any(salt == user.salt for user in self.users):
            salt = generate_random_charset(8)
        salted_pass = password + str(salt)
        hashed = hashlib.sha256(salted_pass.encode()).hexdigest()
        role = "super admin"
        # permissions = Role.permit("super admin")
        if password != password_confirm:
            print("Passwords do not match. Please try again.")
            return
        super_admin = User(email, username, password, salt, hashed, role)
        # self.users.append(super_admin)
        # public_key, private_key = generate_key_pair()
        print("Super admin created successfully!")

        # Send public key to chat system
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(('localhost', 12345))
            s.sendall(f"{super_admin}".encode())
            # s.sendall(f"{username}:{public_key}".encode())
            # print(f"Public key for {username} sent to chat system.")
        return super_admin

    def sign_up(self):
        user_list = []
        email = input("Enter your email: ")
        while any(email == user.email for user in self.users):
            email = input("This email has been used. Enter another one: ")
        username = input("Enter your username: ")
        while any(username == user.username for user in self.users):
            username = input("This username has been used. Enter another one: ")
        password = input("Enter your password: ")
        password_confirm = input("Confirm your password: ")
        salt = generate_random_charset(8)
        while any(salt == user.salt for user in self.users):
            salt = generate_random_charset(8)
        salted_pass = password + str(salt)
        hashed = hashlib.sha256(salted_pass.encode()).hexdigest()
        if password != password_confirm:
            print("Passwords do not match. Please try again.")
            return
        role = "begginer user"
        # new_user = "{email}, {username}, {password}, {salt}, {hashed}, {role}"
        user_list.extend(email, username, password, salt, hashed, role)
        # self.users.append(new_user)
        # public_key, private_key = generate_key_pair()
        print("User signed up successfully!")

        # Send public key to chat system
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(('localhost', 12345))
            # s.sendall(f"{username}:{public_key}".encode())
            s.sendall("sign up").encode
            s.sendall(f"{user_list}".encode())
            # print(f"Public key for {username} sent to chat system.")

    def login(self):
        username = input("Enter your username: ")
        password = input("Enter your password: ")

        for user in self.users:
            if user.username == username:
                # Combine the entered password with the stored salt for hashing
                salted_pass = password + str(user.salt)
                # Hash the combined password and salt
                hashed = hashlib.sha256(salted_pass.encode()).hexdigest()
                # Check if the hashed password matches the stored hashed password
                if hashed == user.hashed:
                    print("Login successful!")
                    return
                else:
                    print("Incorrect password.")
                    return
        print("User not found.")

    def show_users(self):
        if not self.users:
            print("No users signed up yet.")
        else:
            # inp = int(input(": "))
            # print(self.users[inp])
            for user in self.users:
                print(user)
                # print(f"Email: {user.email}, Username: {user.username}")


# Example usage:
if __name__ == "__main__":
    system = SignUpSystem()
    super_admin = system.create_super_admin()

    while True:
        action = int(input("1.Sign up\t2.Login\t 3.Show Users\t4.Private chat\t5.Group chat\t6.Exit\n"))
        if action == 1:
            system.sign_up()
        elif action == 2:
            system.login()
        elif action == 3:
            system.show_users()
        elif action == 4:
            pass
        elif action == 5:
            pass
        elif action == 6:
            break
        else:
            print("Invalid action.")
